Python Package Management & PyPI (Complete Guide)
1. Python Package Index (PyPI) Overview
What is PyPI?
Official repository for Python packages

Hosts 400,000+ packages (as of 2024)

Two versions:

pypi.org (main production)

test.pypi.org (testing/staging)

Key Components
Package metadata (setup.py, pyproject.toml)

Distribution formats:

Source distributions (sdist)

Built distributions (wheel)

Package classifiers (Python version, license, OS compatibility)

2. Finding & Installing Packages
Searching PyPI
Web interface: pypi.org/search

Command line:

bash
pip search <package>  # (Deprecated, use web search)
pip download --no-deps <package>  # Inspect before install
Installation Methods
Command	Purpose
pip install package	Latest stable version
pip install package==1.0.0	Specific version
pip install 'package>=1.0.0,<2.0.0'	Version range
pip install -e ./path/to/pkg	Editable/development install
Advanced Installation
Index URLs: --index-url / --extra-index-url

Constraints files: pip install -c constraints.txt

Hash verification: --require-hashes

3. Publishing Packages to PyPI
Package Structure Essentials
text
mypackage/
├── mypackage/          # Actual package
│   ├── __init__.py
│   └── module.py
├── tests/              # Tests (optional)
├── pyproject.toml      # Build system config
├── README.md           # Project description
└── LICENSE             # Legal info
Key Configuration Files
pyproject.toml (Modern Standard)
toml
[build-system]
requires = ["setuptools>=42", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "mypackage"
version = "1.0.0"
authors = [{name = "Your Name", email = "you@example.com"}]
description = "My awesome package"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
classifiers = [
    "Programming Language :: Python :: 3",
    "Operating System :: OS Independent",
]
Legacy setup.py (Deprecated but still used)
python
from setuptools import setup

setup(
    name="mypackage",
    version="1.0.0",
    packages=["mypackage"],
    install_requires=["requests>=2.25.0"],
)
Publishing Steps
Build distributions:

bash
pip install build
python -m build
Generates dist/ with .tar.gz and .whl files

Upload to PyPI:

bash
pip install twine
twine upload dist/*
First time: Requires PyPI account + API token

Test first: twine upload --repository testpypi dist/*

4. Package Maintenance Best Practices
Versioning Strategy
Follow Semantic Versioning (SemVer):

MAJOR.MINOR.PATCH (e.g., 2.1.0)

Use __version__ in __init__.py

Dependency Management
Required: install_requires in setup.py/pyproject.toml

Optional: extras_require for optional features

Development: dev_requirements.txt or pip install -e .[dev]

Security Considerations
Audit packages: pip-audit

2FA on PyPI: Mandatory for critical operations

API tokens: Use instead of passwords

5. Troubleshooting Common Issues
Issue	Solution
PackageNotFoundError	Check spelling, try --index-url
Version conflicts	Use pip check, virtual environments
Upload fails (403)	Verify PyPI credentials/token
Legacy metadata	Migrate to pyproject.toml
6. Advanced Topics
Private Package Hosting
Alternate indexes:

DevPI, Artifactory, Nexus

AWS CodeArtifact, Google Artifact Registry

.pypirc config:

ini
[distutils]
index-servers =
  pypi
  private

[private]
repository = https://your-private-repo.com
username = your-username
password = your-token
Automated Publishing
GitHub Actions workflow example:

yaml
- name: Publish to PyPI
  if: startsWith(github.ref, 'refs/tags')
  run: |
    pip install twine
    twine upload dist/*
  env:
    TWINE_USERNAME: __token__
    TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
Package Signing
GPG signatures:

bash
twine upload --sign --identity you@example.com dist/*
