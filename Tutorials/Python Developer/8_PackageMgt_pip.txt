1. pip Installation Deep Dive
Installation Methods
Method	Command	Use Case
Default install	python -m pip install package	Most reliable (avoids PATH issues)
User install	pip install --user package	No admin rights needed
Editable mode	pip install -e .	Development/local packages
From source	pip install git+https://repo.url	Direct from VCS
From archive	pip install package.tar.gz	Local/offline installs
Version Control
Pre-release versions:

bash
pip install --pre package  # Gets alpha/beta/rc versions
Version specifiers:

~=1.2.3 (1.2.3+, but <1.3.0)

!=1.2.3 (exclude specific version)

Advanced Flags
--no-deps: Skip dependency installation

--ignore-installed: Force reinstall

--prefix: Custom installation path

--no-cache-dir: Disable caching

2. Requirements Files (Enhanced)
File Formats
text
# Standard requirements.txt
package==1.0.0
another-package>=2.0.0

# With hashes (secure)
package==1.0.0 \
    --hash=sha256:abc123... \
    --hash=sha256:def456...
Advanced Features
Constraints files:

bash
pip install -c constraints.txt
Locks versions without forcing installs

Multi-stage requirements:

text
# requirements/
├── base.txt
├── dev.txt  # -r base.txt + testing tools
└── prod.txt # -r base.txt + gunicorn
Environment markers:

text
pytest; python_version > "3.8" and sys_platform == "linux"
Generation Tools
pip freeze > requirements.txt

pipreqs (scans imports)

pip-compile (from pip-tools)

3. Virtual Environments (Professional Setup)
Comparison of Tools
Tool	Command	Best For
venv	python -m venv .venv	Standard library
virtualenv	virtualenv venv	Legacy Python support
conda	conda create -n env	Data science stacks
pipenv	pipenv shell	Combined dep management
Advanced venv Usage
Custom Python versions:

bash
python3.9 -m venv py39-env
Without pip:

bash
python -m venv --without-pip env
Relocatable envs:

bash
python -m venv --relocatable .venv
Automation & Integration
Shell auto-activation:

bash
# Add to .bashrc/zshrc
venv() { python -m venv "$1" && source "$1/bin/activate" }
VS Code integration:

json
// .vscode/settings.json
{
  "python.venvPath": "./.venv",
  "python.defaultInterpreterPath": "./.venv/bin/python"
}
4. Professional Workflow Integration
CI/CD Pipeline Example
yaml
# .github/workflows/test.yml
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    - name: Create venv
      run: python -m venv .venv
    - name: Install dependencies
      run: |
        source .venv/bin/activate
        pip install -r requirements.txt
        pip install pytest
    - name: Run tests
      run: |
        source .venv/bin/activate
        pytest
Security Best Practices
Vulnerability scanning:

bash
pip install safety
safety check
Hash verification:

text
# requirements.txt
package==1.0.0 \
    --hash=sha256:abc123...
Dependency auditing:

bash
pip install pip-audit
pip-audit
5. Troubleshooting Guide
Issue	Solution	Prevention
Broken dependencies	pip check	Use hash verification
Permission errors	--user flag	Use virtualenvs
SSL errors	pip --trusted-host pypi.org	Update certs
Slow installs	--find-links + local mirror	Set up local cache
Next-Level Recommendations
Dependency isolation:

bash
pip install --target ./lib package
export PYTHONPATH=./lib
Wheel building:

bash
pip wheel -w wheels/ -r requirements.txt
pip install --no-index --find-links=wheels/ -r requirements.txt
Package indexes:

Configure multiple indexes in pip.conf:

ini
[global]
extra-index-url = https://internal.example.com/simple