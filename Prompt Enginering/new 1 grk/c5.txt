Create a detailed, accurate, and up-to-date HTML page for a learning module titled "Parts of a Prompt" as part of a comprehensive course on Large Language Models (LLMs) and prompt engineering. The content must be correct, in-depth, and suitable for learners with a beginner-to-intermediate understanding of AI. Use HTML with inline Tailwind CSS (via CDN) for styling and JavaScript for interactivity or visualizations. Follow these requirements:

1. **Content Requirements**:
   - Cover the following topics in detail:
     - **Instruction**: Explain the role of clear instructions in a prompt (e.g., "Summarize the following text" or "Generate a Python function"), with examples showing how precise instructions improve results.
     - **Context**: Describe how providing background information helps the model understand the task, including examples of context-rich prompts.
     - **Input Data**: Discuss how to include text or data for the model to process, with examples of prompts that incorporate input data effectively.
     - **Output Format**: Explain how to specify the desired structure of the response (e.g., JSON, bullet points, table), with examples of prompts and their formatted outputs.
     - **Constraints and Parameters**: Discuss adding constraints like response length, tone, or specific exclusions (e.g., "Avoid technical jargon"), with examples.
     - **Examples in Prompts**: Explain how including examples within the prompt (e.g., few-shot prompting) guides the model, with comparative examples.
     - **Prompt Design Principles**: Provide best practices for combining these parts, such as balancing clarity and brevity, ensuring specificity, and aligning with task goals.
   - Include at least two code examples (e.g., Python scripts using an LLM API like Hugging Face’s Transformers to demonstrate a prompt with all parts vs. a prompt missing some parts, showing the impact on output quality).
   - Provide a visual representation using HTML5 Canvas and JavaScript to illustrate a concept (e.g., a diagram breaking down the anatomy of a prompt or a flowchart showing how each part contributes to the LLM’s response).

2. **Styling Requirements**:
   - Use Tailwind CSS (via CDN) for responsive, modern styling.
   - Structure the page with a header, navigation bar, main content section, and footer.
   - Ensure the design is clean, with a focus on readability (e.g., use appropriate font sizes, spacing, and color contrasts).
   - Style code snippets with a monospaced font and syntax highlighting effect using Tailwind classes.
   - Make the canvas visualization interactive (e.g., hover effects or clickable elements to reveal explanations of each prompt part).

3. **Interactivity Requirements**:
   - Include JavaScript to add interactivity, such as buttons to toggle between examples of complete vs. incomplete prompts, show/hide code outputs, or animate the canvas visualization.
   - Ensure the JavaScript is lightweight and compatible with modern browsers.

4. **Output Format**:
   - The output must be a single, complete HTML file with inline Tailwind CSS and JavaScript.
   - The content must be wrapped in appropriate HTML semantic elements (e.g., `<article>`, `<section>`).
   - Include a title, meta tags for responsiveness, and a favicon link.
   - Ensure all code is functional and error-free.

5. **Additional Instructions**:
   - Verify that all information is accurate and up-to-date as of May 2025, avoiding outdated references (e.g., don’t mention deprecated APIs or techniques).
   - Use clear, concise language suitable for learners, with examples to illustrate complex concepts.
   - Structure the content with headings, subheadings, and bullet points for clarity.
   - Avoid speculative or unverified information about LLMs or prompting techniques.
   - Ensure the content is engaging and practical, preparing learners for applying prompt engineering in real-world scenarios.

Output the complete HTML code, including all content, styling, and interactivity, as a single file.