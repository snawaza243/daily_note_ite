Create a detailed, accurate, and up-to-date HTML page for a learning module titled "Advanced Prompt Engineering Techniques" as part of a comprehensive course on Large Language Models (LLMs) and prompt engineering. The content must be correct, in-depth, and suitable for learners with a beginner-to-intermediate understanding of AI, building on prior chapters. Use HTML with inline Tailwind CSS (via CDN) for styling and JavaScript for interactivity or visualizations. Follow these requirements:

1. **Content Requirements**:
   - Cover the following topics in detail:
     - **Tree-of-Thought Prompting**: Explain prompting the model to explore multiple reasoning paths, with examples showing improved problem-solving.
     - **Self-Reflective Prompting**: Discuss asking the model to reflect on its reasoning process, with examples of reflective prompts and their outputs.
     - **Prompt Optimization for Specific Domains**: Describe tailoring prompts for domains like legal, medical, or creative writing, with domain-specific examples.
     - **Automated Prompt Engineering**: Introduce tools or techniques for generating prompts automatically (e.g., using LLMs to optimize prompts), with examples.
     - **Multi-Modal Prompting**: Explain combining text and other inputs (e.g., images) for models supporting multi-modal inputs, with examples.
     - **Handling Long Contexts**: Discuss strategies for managing long inputs or conversations, such as summarization or chunking, with examples.
     - **Future Trends in Prompting**: Explore emerging techniques or tools in prompt engineering as of May 2025, avoiding speculative content.
   - Include at least two code examples (e.g., Python scripts using an LLM API like Hugging Face’s Transformers to demonstrate advanced techniques, such as tree-of-thought or multi-modal prompting).
   - Provide a visual representation using HTML5 Canvas and JavaScript to illustrate a concept (e.g., a diagram of tree-of-thought reasoning paths or a flowchart of automated prompt optimization).

2. **Styling Requirements**:
   - Use Tailwind CSS (via CDN) for responsive, modern styling.
   - Structure the page with a header, navigation bar, main content section, and footer.
   - Ensure the design is clean, with a focus on readability (e.g., use appropriate font sizes, spacing, and color contrasts).
   - Style code snippets with a monospaced font and syntax highlighting effect using Tailwind classes.
   - Make the canvas visualization interactive (e.g., hover effects or clickable elements to reveal explanations of each technique).

3. **Interactivity Requirements**:
   - Include JavaScript to add interactivity, such as buttons to toggle between examples of advanced prompting techniques, show/hide code outputs, or animate the canvas visualization.
   - Ensure the JavaScript is lightweight and compatible with modern browsers.

4. **Output Format**:
   - The output must be a single, complete HTML file with inline Tailwind CSS and JavaScript.
   - The content must be wrapped in appropriate HTML semantic elements (e.g., `<article>`, `<section>`).
   - Include a title, meta tags for responsiveness, and a favicon link.
   - Ensure all code is functional and error-free.

5. **Additional Instructions**:
   - Verify that all information is accurate and up-to-date as of May 2025, avoiding outdated references (e.g., don’t mention deprecated APIs or techniques).
   - Use clear, concise language suitable for learners, with examples to illustrate complex concepts.
   - Structure the content with headings, subheadings, and bullet points for clarity.
   - Avoid speculative or unverified information about LLMs or prompting techniques.
   - Ensure the content is engaging and practical, preparing learners for advanced real-world applications.

Output the complete HTML code, including all content, styling, and interactivity, as a single file.