Create a detailed, accurate, and up-to-date HTML page for a learning module titled "Writing Good Prompts" as part of a comprehensive course on Large Language Models (LLMs) and prompt engineering. The content must be correct, in-depth, and suitable for learners with a beginner-to-intermediate understanding of AI. Use HTML with inline Tailwind CSS (via CDN) for styling and JavaScript for interactivity or visualizations. Follow these requirements:

1. **Content Requirements**:
   - Cover the following topics in detail:
     - **Using Delimiters**: Explain how to use delimiters (e.g., """, ---, ###) to separate instructions from input, with examples showing their impact on clarity.
     - **Structured Output**: Describe how to request structured outputs like JSON, XML, or HTML for machine-readable responses, including examples of prompts and their outputs.
     - **Style and Tone**: Discuss how to specify tone (e.g., "Write in a formal tone" or "Use a conversational style") and its effect on responses.
     - **Conditions and Verification**: Explain how to include conditions in prompts (e.g., "Check if the input is a valid email address") and ask the model to verify them.
     - **Few-Shot Prompting**: Provide examples of few-shot prompting to guide the model, showing how examples improve output quality.
     - **Chain of Thought (CoT)**: Describe how to instruct the model to reason step-by-step for complex tasks, with an example prompt and output.
     - **Self-Solving Instructions**: Explain how to prompt the model to work out solutions before answering, improving accuracy.
     - **Iterating and Refining Prompts**: Discuss how to refine prompts based on initial outputs, including iterative techniques.
     - **Common Prompt Writing Mistakes**: Highlight errors like vague instructions, overly complex prompts, or lack of context, with examples of fixes.
     - **Prompt Optimization Tips**: Provide strategies for balancing prompt length, specificity, and complexity to optimize performance.
     - **Testing and Evaluating Prompts**: Explain how to assess prompt effectiveness (e.g., checking for accuracy, relevance, and consistency).
   - Include at least two code examples (e.g., Python scripts using an LLM API like Hugging Face’s Transformers to demonstrate a well-crafted prompt vs. a poorly crafted one, or a prompt generating JSON output).
   - Provide a visual representation using HTML5 Canvas and JavaScript to illustrate a concept (e.g., a diagram showing the structure of a good prompt or a flowchart of the prompt refinement process).

2. **Styling Requirements**:
   - Use Tailwind CSS (via CDN) for responsive, modern styling.
   - Structure the page with a header, navigation bar, main content section, and footer.
   - Ensure the design is clean, with a focus on readability (e.g., use appropriate font sizes, spacing, and color contrasts).
   - Style code snippets with a monospaced font and syntax highlighting effect using Tailwind classes.
   - Make the canvas visualization interactive (e.g., hover effects or clickable elements to reveal explanations of prompt components).

3. **Interactivity Requirements**:
   - Include JavaScript to add interactivity, such as buttons to toggle between good and bad prompt examples, show/hide code outputs, or animate the canvas visualization.
   - Ensure the JavaScript is lightweight and compatible with modern browsers.

4. **Output Format**:
   - The output must be a single, complete HTML file with inline Tailwind CSS and JavaScript.
   - The content must be wrapped in appropriate HTML semantic elements (e.g., `<article>`, `<section>`).
   - Include a title, meta tags for responsiveness, and a favicon link.
   - Ensure all code is functional and error-free.

5. **Additional Instructions**:
   - Verify that all information is accurate and up-to-date as of May 2025, avoiding outdated references (e.g., don’t mention deprecated APIs or techniques).
   - Use clear, concise language suitable for learners, with examples to illustrate complex concepts.
   - Structure the content with headings, subheadings, and bullet points for clarity.
   - Avoid speculative or unverified information about LLMs or prompting techniques.
   - Ensure the content is engaging and practical, preparing learners for advanced prompting techniques in later chapters.

Output the complete HTML code, including all content, styling, and interactivity, as a single file.