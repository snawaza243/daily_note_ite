Create a detailed, accurate, and up-to-date HTML page for a learning module titled "Prompting Techniques" as part of a comprehensive course on Large Language Models (LLMs) and prompt engineering. The content must be correct, in-depth, and suitable for learners with a beginner-to-intermediate understanding of AI. Use HTML with inline Tailwind CSS (via CDN) for styling and JavaScript for interactivity or visualizations. Follow these requirements:

1. **Content Requirements**:
   - Cover the following topics in detail:
     - **Role Prompting**: Explain how to use role-based prompts (e.g., "Act as a Python expert and explain list comprehensions"), including benefits and examples.
     - **Few-Shot Prompting**: Describe providing examples before the question to guide the model, with at least two examples showing improved output quality.
     - **Chain of Thought (CoT)**: Discuss instructing the model to reason step-by-step for complex tasks, with an example prompt and its output.
     - **Zero-Shot CoT**: Explain how adding "Let's think step by step" enhances reasoning without examples, including a comparative example.
     - **Least-to-Most Prompting**: Describe breaking complex tasks into smaller sub-questions, with an example showing the process.
     - **Dual Prompt Approach**: Explain using one prompt for planning and another for execution, with an example of both prompts and their outputs.
     - **Combining Techniques**: Discuss how to combine multiple techniques (e.g., role prompting + CoT) for better results, with an example.
     - **Self-Consistency Prompting**: Explain asking the model to generate multiple responses and select the best one, with an example.
     - **Prompt Chaining**: Describe linking prompts sequentially to handle complex tasks, with an example of chained prompts.
     - **When to Use Each Technique**: Provide guidance on choosing the appropriate technique based on task complexity, model capabilities, and desired output.
   - Include at least two code examples (e.g., Python scripts using an LLM API like Hugging Face’s Transformers to demonstrate different prompting techniques, such as few-shot vs. zero-shot CoT, or a combined technique).
   - Provide a visual representation using HTML5 Canvas and JavaScript to illustrate a concept (e.g., a flowchart showing how different prompting techniques process a task or a diagram comparing their workflows).

2. **Styling Requirements**:
   - Use Tailwind CSS (via CDN) for responsive, modern styling.
   - Structure the page with a header, navigation bar, main content section, and footer.
   - Ensure the design is clean, with a focus on readability (e.g., use appropriate font sizes, spacing, and color contrasts).
   - Style code snippets with a monospaced font and syntax highlighting effect using Tailwind classes.
   - Make the canvas visualization interactive (e.g., hover effects or clickable elements to reveal explanations of each technique).

3. **Interactivity Requirements**:
   - Include JavaScript to add interactivity, such as buttons to toggle between examples of different prompting techniques, show/hide code outputs, or animate the canvas visualization.
   - Ensure the JavaScript is lightweight and compatible with modern browsers.

4. **Output Format**:
   - The output must be a single, complete HTML file with inline Tailwind CSS and JavaScript.
   - The content must be wrapped in appropriate HTML semantic elements (e.g., `<article>`, `<section>`).
   - Include a title, meta tags for responsiveness, and a favicon link.
   - Ensure all code is functional and error-free.

5. **Additional Instructions**:
   - Verify that all information is accurate and up-to-date as of May 2025, avoiding outdated references (e.g., don’t mention deprecated APIs or techniques).
   - Use clear, concise language suitable for learners, with examples to illustrate complex concepts.
   - Structure the content with headings, subheadings, and bullet points for clarity.
   - Avoid speculative or unverified information about LLMs or prompting techniques.
   - Ensure the content is engaging and practical, preparing learners for real-world applications in later chapters.

Output the complete HTML code, including all content, styling, and interactivity, as a single file.