
<!-- Minimal with Heading -->
<script type="application/json" data-post-list-config>
{
  "label": "ServiceNow",
  "sortOrder": "descending",
  "heading": "ServiceNow Tutorials"
}
</script>
<!-- Output: Heading "ServiceNow Tutorials", all ServiceNow posts in descending order, links in new tab, no pretext or numbering -->

<!-- Heading with maxResults -->
<script type="application/json" data-post-list-config>
{
  "label": "ServiceNow",
  "sortOrder": "ascending",
  "maxResults": 3,
  "heading": "Top 3 Tutorials"
}
</script>
<!-- Output: Heading "Top 3 Tutorials", 3 ServiceNow posts in ascending order, links in new tab, no pretext or numbering -->

<!-- Heading with openInNewTab false -->
<script type="application/json" data-post-list-config>
{
  "label": "ServiceNow",
  "sortOrder": "descending",
  "openInNewTab": false,
  "heading": "Explore ServiceNow"
}
</script>
<!-- Output: Heading "Explore ServiceNow", all ServiceNow posts in descending order, links in same tab, no pretext or numbering -->

<!-- Heading with Text Pretext -->
<script type="application/json" data-post-list-config>
{
  "label": "ServiceNow",
  "sortOrder": "ascending",
  "preText": "Chapter",
  "heading": "Chapter-wise Tutorials"
}
</script>
<!-- Output: Heading "Chapter-wise Tutorials", all ServiceNow posts in ascending order, links in new tab, prefixed with "Chapter" (e.g., "Chapter PostTitle") -->

<!-- Heading with Symbol Pretext -->
<script type="application/json" data-post-list-config>
{
  "label": "ServiceNow",
  "sortOrder": "descending",
  "preText": "‚û°Ô∏è",
  "maxResults": 5,
  "heading": "Recent Tutorials"
}
</script>
<!-- Output: Heading "Recent Tutorials", 5 ServiceNow posts in descending order, links in new tab, prefixed with "‚û°Ô∏è" (e.g., "‚û°Ô∏è PostTitle") -->

<!-- Heading with Numerical Numbering -->
<script type="application/json" data-post-list-config>
{
  "label": "ServiceNow",
  "sortOrder": "ascending",
  "numberingStyle": "numerical",
  "openInNewTab": false,
  "heading": "Numbered Lessons"
}
</script>
<!-- Output: Heading "Numbered Lessons", all ServiceNow posts in ascending order, links in same tab, numbered as "1> PostTitle", "2> PostTitle", etc. -->

<!-- Heading with Roman Numbering -->
<script type="application/json" data-post-list-config>
{
  "label": "ServiceNow",
  "sortOrder": "descending",
  "numberingStyle": "roman",
  "maxResults": 4,
  "heading": "Featured Posts"
}
</script>
<!-- Output: Heading "Featured Posts", 4 ServiceNow posts in descending order, links in new tab, numbered as "I> PostTitle", "II> PostTitle", etc. -->

<!-- Heading with Alphabetical Numbering -->
<script type="application/json" data-post-list-config>
{
  "label": "ServiceNow",
  "sortOrder": "ascending",
  "numberingStyle": "alphabetical",
  "heading": "Organized Guides"
}
</script>
<!-- Output: Heading "Organized Guides", all ServiceNow posts in ascending order, links in new tab, numbered as "A> PostTitle", "B> PostTitle", etc. -->

<!-- Heading with Pretext and Numbering (Number Before Pretext) -->
<script type="application/json" data-post-list-config>
{
  "label": "ServiceNow",
  "sortOrder": "descending",
  "preText": "Unit",
  "numberingStyle": "numerical",
  "numberAfterPretext": false,
  "heading": "Unit-wise Lessons"
}
</script>
<!-- Output: Heading "Unit-wise Lessons", all ServiceNow posts in descending order, links in new tab, formatted as "1> Unit PostTitle", "2> Unit PostTitle", etc. -->

<!-- Heading with Pretext and Numbering (Number After Pretext) -->
<script type="application/json" data-post-list-config>
{
  "label": "ServiceNow",
  "sortOrder": "ascending",
  "preText": "Chapter",
  "numberingStyle": "roman",
  "numberAfterPretext": true,
  "maxResults": 5,
  "heading": "Chapter-wise Guides"
}
</script>
<!-- Output: Heading "Chapter-wise Guides", 5 ServiceNow posts in ascending order, links in new tab, formatted as "Chapter I> PostTitle", "Chapter II> PostTitle", etc. -->

<!-- Heading with Symbol Pretext and Numbering -->
<script type="application/json" data-post-list-config>
{
  "label": "ServiceNow",
  "sortOrder": "descending",
  "preText": "üëâ",
  "numberingStyle": "alphabetical",
  "numberAfterPretext": false,
  "openInNewTab": false,
  "heading": "Quick Links"
}
</script>
<!-- Output: Heading "Quick Links", all ServiceNow posts in descending order, links in same tab, formatted as "A> üëâ PostTitle", "B> üëâ PostTitle", etc. -->

<!-- Full Configuration with Heading -->
<script type="application/json" data-post-list-config>
{
  "label": "ServiceNow",
  "sortOrder": "ascending",
  "maxResults": 3,
  "openInNewTab": true,
  "preText": "‚ô•Ô∏è",
  "numberingStyle": "numerical",
  "numberAfterPretext": true,
  "heading": "Top Picks"
}
</script>
<!-- Output: Heading "Top Picks", 3 ServiceNow posts in ascending order, links in new tab, formatted as "‚ô•Ô∏è 1> PostTitle", "‚ô•Ô∏è 2> PostTitle", etc. -->

<!-- maxResults Set to 0 with Heading -->
<script type="application/json" data-post-list-config>
{
  "label": "ServiceNow",
  "sortOrder": "descending",
  "maxResults": 0,
  "preText": "‚úçÔ∏è",
  "numberingStyle": "roman",
  "numberAfterPretext": false,
  "heading": "All Tutorials"
}
</script>
<!-- Output: Heading "All Tutorials", all ServiceNow posts in descending order, links in new tab, formatted as "I> ‚úçÔ∏è PostTitle", "II> ‚úçÔ∏è PostTitle", etc. -->

<!-- Multiple Lists with Headings -->
<script type="application/json" data-post-list-config>
{
  "label": "ServiceNow",
  "sortOrder": "descending",
  "preText": "Chapter",
  "numberingStyle": "numerical",
  "numberAfterPretext": true,
  "heading": "Complete Tutorial Series"
}
</script>
<script type="application/json" data-post-list-config>
{
  "label": "ServiceNow",
  "sortOrder": "ascending",
  "maxResults": 5,
  "preText": "‚û°Ô∏è",
  "numberingStyle": "roman",
  "numberAfterPretext": false,
  "heading": "Recent Tutorials"
}
</script>
<script type="application/json" data-post-list-config>
{
  "label": "ServiceNow",
  "sortOrder": "ascending",
  "maxResults": 0,
  "preText": "‚ô•Ô∏è",
  "numberingStyle": "alphabetical",
  "numberAfterPretext": true,
  "heading": "Organized Resources"
}
</script>
<!-- Output: Three lists with headings:
     1. "Complete Tutorial Series": All ServiceNow posts, descending, new tab, "Chapter 1> PostTitle", etc.
     2. "Recent Tutorials": 5 ServiceNow posts, ascending, new tab, "I> ‚û°Ô∏è PostTitle", etc.
     3. "Organized Resources": All ServiceNow posts, ascending, new tab, "‚ô•Ô∏è A> PostTitle", etc. -->
	 
	 
	 
	 




<script type='text/javascript'>
/*<![CDATA[*/
(function() {
  // Helper function to convert numbers to Roman numerals
  function toRomanNumeral(num) {
    if (isNaN(num) || num < 1) return '';
    const romanMap = [
      { value: 1000, numeral: 'M' },
      { value: 900, numeral: 'CM' },
      { value: 500, numeral: 'D' },
      { value: 400, numeral: 'CD' },
      { value: 100, numeral: 'C' },
      { value: 90, numeral: 'XC' },
      { value: 50, numeral: 'L' },
      { value: 40, numeral: 'XL' },
      { value: 10, numeral: 'X' },
      { value: 9, numeral: 'IX' },
      { value: 5, numeral: 'V' },
      { value: 4, numeral: 'IV' },
      { value: 1, numeral: 'I' }
    ];
    let result = '';
    for (const { value, numeral } of romanMap) {
      while (num >= value) {
        result += numeral;
        num -= value;
      }
    }
    return result;
  }

  // Function to fetch and render posts
  function renderPostList(config, container, index) {
    if (!config || !config.label || !config.sortOrder) {
      console.error('Invalid postListConfig: label and sortOrder are required.', config);
      return;
    }

    const sortOrder = config.sortOrder.toLowerCase(); // 'ascending' or 'descending'
    const openInNewTab = config.openInNewTab !== false; // Default to true (new tab)
    const preText = config.preText || ''; // Optional pretext
    const numberingStyle = config.numberingStyle ? config.numberingStyle.toLowerCase() : ''; // Optional numbering style
    const numberAfterPretext = config.numberAfterPretext || false; // Default to false
    const heading = config.heading || ''; // Optional heading
    const blogUrl = 'https://indiantechnoera.blogspot.com'; // Your blog URL
    // Handle maxResults: omit parameter if 0 or undefined to fetch all posts
    const maxResultsQuery = config.maxResults && config.maxResults > 0 ? `max-results=${config.maxResults}` : '';
    const feedUrl = `${blogUrl}/feeds/posts/summary/-/${encodeURIComponent(config.label)}?${maxResultsQuery}&alt=json-in-script&callback=renderPosts_${index}`;

    // Log the feed URL for debugging
    console.log('Fetching posts with URL:', feedUrl);

    // Create a loading indicator
    const loadingDiv = document.createElement('div');
    loadingDiv.className = 'postListLoading';
    loadingDiv.textContent = 'Loading related posts...';
    container.appendChild(loadingDiv);

    // Dynamically load the JSON feed
    const script = document.createElement('script');
    script.src = feedUrl;
    script.onerror = () => {
      loadingDiv.textContent = 'Error loading posts. Please check the label or try again later.';
      console.error('Failed to load feed for label:', config.label, 'URL:', feedUrl);
    };
    document.head.appendChild(script);

    // Callback to process the JSON feed
    window[`renderPosts_${index}`] = function(json) {
      try {
        const entries = json.feed.entry || [];
        if (entries.length === 0) {
          loadingDiv.textContent = 'No posts found for this label. Please verify the label name.';
          return;
        }

        // Create container for the post list
        const postListDiv = document.createElement('div');
        postListDiv.className = 'postListDivTime';

        // Add heading if provided
        if (heading) {
          const headingElement = document.createElement('h3');
          headingElement.className = 'postListHeading';
          headingElement.textContent = heading;
          postListDiv.appendChild(headingElement);
        }

        // Sort entries based on sortOrder
        const sortedEntries = sortOrder === 'ascending' 
          ? entries.slice().reverse() // Oldest first
          : entries; // Newest first

        // Render each post with optional numbering and pretext
        sortedEntries.forEach((entry, idx) => {
          const link = entry.link.find(l => l.rel === 'alternate');
          if (!link) return;

          const entryUrl = link.href;
          const entryTitle = entry.title.$t;
          let displayText = entryTitle;

          // Add numbering based on style
          let number = '';
          if (numberingStyle) {
            if (numberingStyle === 'numerical') {
              number = `${idx + 1}> `;
            } else if (numberingStyle === 'roman') {
              number = `${toRomanNumeral(idx + 1)}> `;
            } else if (numberingStyle === 'alphabetical') {
              number = `${String.fromCharCode(65 + idx)}> `;
            }
          }

          // Combine pretext and numbering
          if (preText && number) {
            displayText = numberAfterPretext 
              ? `${preText} ${number}${entryTitle}`
              : `${number}${preText} ${entryTitle}`;
          } else if (preText) {
            displayText = `${preText} ${entryTitle}`;
          } else if (number) {
            displayText = `${number}${entryTitle}`;
          }

          const item = document.createElement('p');
          item.className = 'postListItem';
          item.innerHTML = `<a class='postListDivCSS' href='${entryUrl}' target='${openInNewTab ? '_blank' : '_self'}'>${displayText}</a>`;
          postListDiv.appendChild(item);
        });

        // Replace loading indicator with post list
        container.replaceChild(postListDiv, loadingDiv);
      } catch (e) {
        loadingDiv.textContent = 'Error rendering posts.';
        console.error('Error processing feed:', e, 'Label:', config.label);
      }
    };
  }

  // Function to find and process postListConfig objects
  function initializePostLists() {
    // Find all script tags with postListConfig
    const scripts = document.querySelectorAll('script[type="application/json"][data-post-list-config]');
    scripts.forEach((script, index) => {
      try {
        const config = JSON.parse(script.textContent);
        const container = document.createElement('div');
        container.id = `postListContainer_${index}`; // Unique ID for each container
        script.parentNode.insertBefore(container, script.nextSibling);
        renderPostList(config, container, index); // Pass index for unique callback
      } catch (e) {
        console.error('Error parsing postListConfig:', e, 'Script content:', script.textContent);
      }
    });
  }

  // Run after DOM is fully loaded
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializePostLists);
  } else {
    initializePostLists();
  }
})();
/*]]>*/
</script>

<style>
.postListDivTime {
  margin: 20px 0;
  padding: 15px;
  background-color: #ffffff;
  border-radius: 10px;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
  border: 1px solid #e8ecef;
  max-width: 800px;
  font-family: &#39;Arial&#39;, sans-serif;
}

.postListHeading {
  font-size: 20px;
  font-weight: 600;
  color: #1a1a1a;
  margin: 0 0 15px 0;
  padding-bottom: 8px;
  border-bottom: 2px solid #e8ecef;
}

.postListItem {
  margin: 8px 0;
  padding: 12px;
  border-radius: 6px;
  transition: background-color 0.3s ease, transform 0.2s ease;
}

.postListItem:hover {
  background-color: #f1f3f5;
  transform: translateX(5px);
}

.postListItem:last-child {
  border-bottom: none;
}

.postListDivCSS {
  color: #0052cc;
  text-decoration: none;
  font-size: 16px;
  font-weight: 600;
  display: block;
  transition: color 0.3s ease;
}

.postListDivCSS:hover {
  color: #003087;
  text-decoration: underline;
}

.postListLoading {
  font-style: italic;
  color: #6c757d;
  text-align: center;
  padding: 12px;
  background-color: #f8f9fa;
  border-radius: 6px;
  font-size: 14px;
}
</style>
    
   